use crate::ast::{AstNode,Term,Op,infix,unary};
use crate::parse::tok::Tok;

grammar<'input>(input: &'input str);

pub Iris: Vec<AstNode> = {
    Crlf* <s:TopLevel*> => s,
};


TopLevel: AstNode = {
    <s:Statement> Crlf+ => s,
};

Statement: AstNode = {
    <f:FnDef> => f,
    <x:VarDeclaration> => x,
    <x:Assignment> => x,
    <m:MethodDef> => m,
    <w:WhileStmt> => w,
    <f:ForStmt> => f,
    // <x:IfStmt> => x,
    <e:Expr> => e,
}

Comma<T>: Vec<T> = {
    <e:T> <v:("," Crlf* <T>)*> => {
        let mut ret = vec![e];
        let mut v = v;
        ret.append(&mut v);
        ret
    }
}

Expr: AstNode = {
    <a:AnonymousFnDef> => a,
    <i:IfStmt> => i,
    <a:UnaryBinaryOps> => a,
}


UnaryBinaryOps = Term13;

Term13: AstNode = {
    <l:Term13> "or" <r:Term12> => infix(l, Op::Or, r),
    Term12,
}

Term12: AstNode = {
    <l:Term12> "and" <r:Term11> => infix(l, Op::And, r),
    Term11,
}

Term11: AstNode = {
    <l:Term11> "|" <r:Term10> => infix(l, Op::BitwiseOr, r),
    Term10,
}

Term10: AstNode = {
    <l:Term10> "^" <r:Term9> => infix(l, Op::BitwiseXor, r),
    Term9,
}

Term9: AstNode = {
    <l:Term9> "&" <r:Term8> => infix(l, Op::BitwiseAnd, r),
    Term8,
}

Term8: AstNode = {
    <l:Term8> "==" <r:Term7> => infix(l, Op::Equal, r),
    <l:Term8> "!=" <r:Term7> =>  infix(l, Op::NotEqual, r),
    Term7,
}

Term7: AstNode = {
    <l:Term7> ">=" <r:Term6> => infix(l, Op::GreaterThanEqual, r),
    <l:Term7> "<=" <r:Term6> =>  infix(l, Op::LessThanEqual, r),
    <l:Term7> ">" <r:Term6> =>  infix(l, Op::GreaterThan, r),
    <l:Term7> "<" <r:Term6> =>  infix(l, Op::LessThan, r),
    Term6,
}

Term6: AstNode = {
    <l:Term6> ">>" <r:Term5> => infix(l, Op::Shr, r),
    <l:Term6> "<<" <r:Term5> =>  infix(l, Op::Shl, r),
    Term5,
}

Term5: AstNode = {
    <l:Term5> "+" <r:Term4> => infix(l, Op::Add, r),
    <l:Term5> "-" <r:Term4> =>  infix(l, Op::Sub, r),
    Term4,
}

Term4: AstNode = {
    <l:Term3> "*" <r:Term3> => infix(l, Op::Mul, r),
    <l:Term3> "/" <r:Term3> => infix(l, Op::Div, r),
    <l:Term3> "%" <r:Term3> => infix(l, Op::Mod, r),
    Term3,
}

Term3: AstNode = {
    <l:Term3> "**" <r:Term2> => infix(l, Op::Exp, r),
    Term2,
}

Term2: AstNode = {
    "not" <r:Term2> => unary(Op::Not, r),
    "!" <r:Term2> => unary(Op::BitwiseNot, r), 
    "-" <r:Term2> => unary(Op::Negation, r),

    Term1,
};

// "dot" is highest precedence infix operator.
// It's simply syntactic sugar for a function call:
// "my string".print() -> print("my string")
Term1: AstNode = {
    <l:Term1> "." <ast_fn:FnCall> => match ast_fn {
        AstNode::FnCall{ name, args } => {
            let mut new_args = args;
            new_args.insert(0, l);
            // A way to do this immutably?
            // let mut new_args = vec![e];
            // new_args.append(args);
            AstNode::FnCall {
                name,
                args: new_args,
            }
        },
        _ => unreachable!(),
    },
    <l:Term1> "[" <r:Term> "]" => infix(l, Op::MemberAccess, r),
    Term,
}

// As we go up in Term<n>, precedence goes down.
Term: AstNode = {
    <n:Int> => AstNode::Term(Term::Integer(n)),
    <x:Ident> => AstNode::Term(Term::Ident(x)),
    <b:Bool> => AstNode::Term(Term::Bool(b)),
    <s:Str> => AstNode::Term(Term::Str(s)),
    <n:NoneVal> => n,
    <l:ListLiteral> => l,
    // TODO: fnCall should probably be a unary operator instead of a term
    <f:FnCall> => f,
    // Grouping of exprs has highest precedence
    "(" <e:Expr> ")" => e,
}


FnDefArgs = Comma<Ident>;
FnBodyStmt: AstNode = {
    <s:Statement> Crlf+ => s,
    // <x:Return> Crlf => x,
}
OneLineFnDef: AstNode = {
    "fn" <name:Ident> "(" <args:FnDefArgs?> ")" <body: Expr> "end" => AstNode::FnDef {
        name,
        args: match args {
            Some(a) => a,
            None => vec![],
        },
        body: vec![body],
    }
}
MultiLineFnDef: AstNode = {
    "fn" <name:Ident> "(" <args:FnDefArgs?> ")" Crlf+ <body: FnBodyStmt*> "end" => AstNode::FnDef {
        name,
        args: match args {
            Some(a) => a,
            None => vec![],
        },
        body,
    }
}
FnDef: AstNode = {
    <x:OneLineFnDef> => x,
    <x:MultiLineFnDef> => x,
}
MethodDef: AstNode = {
    "method" <name:Ident> "(" <args:FnDefArgs?> ")" "for" <for_type:Ident> Crlf+ <body: FnBodyStmt*> "end" => AstNode::MethodDef {
        name,
        for_type,
        args: match args {
            Some(a) => a,
            None => vec![],
        },
        body,
    }
}

// TypeIdent: AstNode = {

// }

// TODO: runtime to support anonymous fn defs
OneLineAnonymousFnDef: AstNode = {
    "fn" "(" <args:FnDefArgs?> ")" <body: Expr> "end" => AstNode::FnDef {
        name: "anon".to_string(),
        args: match args {
            Some(a) => a,
            None => vec![],
        },
        body: vec![body],
    }
}
MultiLineAnonymousFnDef: AstNode = {
    "fn" "(" <args:FnDefArgs?> ")" Crlf+ <body: FnBodyStmt*> "end" => AstNode::FnDef {
        name: "anon".to_string(),
        args: match args {
            Some(a) => a,
            None => vec![],
        },
        body,
    }
}
AnonymousFnDef: AstNode = {
    <x:OneLineAnonymousFnDef> => x,
    <x:MultiLineAnonymousFnDef> => x,
}

VarDeclaration: AstNode = {
    "let" <ident:Ident> "=" <e:Expr> => AstNode::VarDeclaration(
        Term::Ident(ident),
        Box::new(e),
    )
}
Assignment: AstNode = {
    <ident:Ident> "=" <e:Expr> => AstNode::Assignment(
        Term::Ident(ident),
        Box::new(e),
    )
}


OneLineElse: AstNode = { "else" <else_body:Expr> => else_body }
OneLineIfStmt: AstNode = {
    "if" <cond_expr:Expr> "then" <body: Expr> <else_body:OneLineElse?> "end"  => AstNode::If {
        cond_expr: Box::new(cond_expr),
        body: vec![body],
        else_if: vec![],
        else_body: match else_body {
            Some(b) => vec![b],
            None => vec![],
        }
    }
}

ElseIf: AstNode = {
    "elif" <cond_expr:Expr> "then" Crlf+ <body: FnBodyStmt*> => AstNode::ElseIf {
        cond_expr: Box::new(cond_expr),
        body,
    }
}
Else: Vec<AstNode> = {
    "else" Crlf+ <body: FnBodyStmt*> => body,
}

MultiLineIfStmt: AstNode = {
    "if" <cond_expr:Expr> "then" Crlf+ <body: FnBodyStmt*> <else_if:ElseIf*> <else_body:Else?> "end"  => AstNode::If {
        cond_expr: Box::new(cond_expr),
        body,
        else_if,
        else_body: match else_body {
            Some(b) => b,
            None => vec![],
        }
    }
}
IfStmt: AstNode = {
    <x:OneLineIfStmt> => x,
    <x:MultiLineIfStmt> => x,
}

WhileStmt: AstNode = {
    "while" <cond_expr:Expr> "do" Crlf+ <body:FnBodyStmt*> "end" =>
        AstNode::WhileStmt(Box::new(cond_expr), body)
}
ForStmt: AstNode = {
    "for" <item_var:Ident> "in" <iterable:Expr> "do" Crlf+ <body:FnBodyStmt*> "end" =>
        AstNode::ForStmt(item_var, Box::new(iterable), body)
}

FnCallArgs = Comma<Expr>;
FnCall: AstNode = {
    <name:Ident> "(" <maybe_args:FnCallArgs?> ")" => {
        AstNode::FnCall{
            name,
            args: match maybe_args {
                Some(a) => a,
                None => vec![],
            }
        }
    }
}

ListLiteral: AstNode = {
    "[" <v:Comma<Expr>> "]" => AstNode::FnCall{
        name: "list".to_string(),
        args: v,
    }
}


Bool: bool = {
    "true" => true,
    "false" => false,
}

NoneVal: AstNode = { "None" => AstNode::Term(Term::None) }

Ident: String = {
    // TODO: Don't copy string, leave as reference for better memory usage
    <i:IdentTok> => i.to_string(),
}

Int: i32 = {
    <i:IntTok> => match i {
        Tok::Number(a) => a,
        _ => unreachable!(),
    }
}

Str: String = {
    <s:SingleLiteralString> => s[1..s.len()-1].to_string(),
    <s:DoubleLiteralString> => s[1..s.len()-1].to_string(),
}


extern {
    type Location = usize;
    type Error = ();

    enum Tok<'input> {
        "." => Tok::Dot,
        "=" => Tok::Equals,
        "+" => Tok::Plus,
        "-" => Tok::Minus,
        "/" => Tok::ForwardSlash,
        "*" => Tok::Star,
        ">" => Tok::GreaterThan,
        "<" => Tok::LessThan,
        "&" => Tok::Ampersand,
        "|" => Tok::BitwiseOr,
        "(" => Tok::LParen,
        ")" => Tok::RParen,
        "{" => Tok::LCurlyBracket,
        "}" => Tok::RCurlyBracket,
        "[" => Tok::LBracket,
        "]" => Tok::RBracket,
        "^" => Tok::Caret,
        "%" => Tok::Modulo,
        "!" => Tok::Exclamation,
        "~" => Tok::Tilde,
        "," => Tok::Comma,
        ";" => Tok::Semicolon,
        "==" => Tok::DoubleEquals,
        "!=" => Tok::NotEqual,
        ">=" => Tok::GreaterThanEqual,
        "<=" => Tok::LessThanEqual,
        "<<" => Tok::ShiftLeft,
        ">>" => Tok::ShiftRight,
        "**" => Tok::Exponent,
        "->" => Tok::Arrow,
        "true" => Tok::True,
        "false" => Tok::False,
        "if" => Tok::If,
        "else" => Tok::Else,
        "elif" => Tok::Elif,
        "fn" => Tok::Fn,
        "return" => Tok::Return,
        "while" => Tok::While,
        "for" => Tok::For,
        "in" => Tok::In,
        "let" => Tok::Let,
        "break" => Tok::Break,
        "continue" => Tok::Continue,
        "match" => Tok::Match,
        "enum" => Tok::Enum,
        "struct" => Tok::Struct,
        "and" => Tok::And,
        "or" => Tok::Or,
        "not" => Tok::Not,
        "end" => Tok::End,
        "then" => Tok::Then,
        "method" => Tok::Method,
        "do" => Tok::Do,
        "None" => Tok::None,
        SingleLiteralString => Tok::SingleLiteralString(<&'input str>),
        DoubleLiteralString => Tok::DoubleLiteralString(<&'input str>),
        IdentTok => Tok::Ident(<&'input str>),
        Crlf => Tok::Crlf,
        IntTok => Tok::Number(i32),
    }
}